###############################################################################
# -*- coding: utf-8 -*-
# cgparam: Parameterization of a coarse-grained model with Stillinger-Weber 
#          potentials.
#
# Authors: Pu Du
# 
# Released under the GNU License
###############################################################################

from __future__ import print_function, division
import time
import datetime
import sys
from six.moves import range, zip

import csv
import pandas as pd
import numpy as np
from itertools import product
from .base import Loader

class SW(Loader):
    """Stillinger-Weber potentials"""

    def __init__(self, filename):
        super(SW, self).__init__(filename)
        atoms = self.constants['atoms'].replace(' ', '').split(',')
        self.combs = list((product(atoms, repeat=3)))

    def csv_reader(self, filename):
        """ read from CSV file"""
        df = pd.read_csv(filename, sep='\t', encoding='utf-8')
        header = list(df.columns)
        return header, df

    def csv_writer(self, df, filename):
        """ write to a CSV file"""
        time = datetime.datetime.now().strftime("%y-%m-%d-%H-%M")+'_'
        filename = time + filename
        df.to_csv(filename, sep='\t', index=False, encoding='utf-8')

    def lammps_input_reader(self, filename):
        """"read lammps SW input"""
        pass

    def lammps_input_writer(self, filename, b2, b3):
        """write lammps SW input"""
        if filename:
            filename += '.sw'
        else:
            filename = 'system.sw'

        with open(filename,'w') as f:
            current = time.asctime(time.localtime(time.time()))
            f.write('# SW LAMMPS input generated by cgparam at {:s}\n'.format(current))
            f.write('# format of a single entry (one or more lines):\n')
            f.write('#   element 1, element 2, element 3,\n')        
            f.write('#   epsilon, sigma, a, lambda, gamma, costheta0, A, B, p, q, tol)\n')
            
            a = self.constants['a']
            l = self.constants['lambda']
            gamma = self.constants['gamma']
            costheta = self.constants['costheta']
            A = self.constants['A']
            B = self.constants['B']
            p = self.constants['p']
            q = self.constants['q']
            tol = self.constants['tol']

            for comb in self.combs:
                [i, j, k] = comb
                #twobody
                for index, row in b2.iterrows():
                    if set([i, j]) == set([row['i'], row['j']]):
                        epsilon = row['epsilon']
                        sigma = row['sigma']

                #threebody
                for index, row in b3.iterrows():
                    if [row['i'], row['j'], row['k']] == ['mW', 'mW', 'O']:
                        #print([i, j, k])
                        pass
                    if set([i, j, k]) == set([row['i'], row['j'], row['k']]):
                        l = row['lambda']
                        costheta = row['costheta']
                info = [i,j,k,epsilon,sigma, a, l, gamma, costheta, A, B, p, q, tol]
                f.write(self.line_format(info))
                l = self.constants['lambda']
    
    def modify_data(self, b2, b3, paramname, number, i, j, k=None):
        """change parameter of SW potentials"""
        if k is None:
            for index, row in b2.iterrows():
                if set([i, j]) == set([row['i'], row['j']]):
                    b2.set_value(index, paramname, number)
        else:
            for index, row in b3.iterrows():
                if set([i, j, k]) == set([row['i'], row['j'], row['k']]):
                     b3.set_value(index, paramname, number)

        return b2, b3

    def line_format(self, info):
        """line's format of lammps SW input"""
        s = '{:4} {:4} {:4} {:.3f} {:.4f} {:.1f} {:.2f} {:1f} {:f} {:f} {:f} {:d} {:d} {:d}\n'.format(*info)
        return s

if __name__ == '__main__':
    a = SW('constants.yml')
    header_b2, b2 = a.csv_reader('2b.csv')
    header_b3, b3 = a.csv_reader('3b.csv')
    #a.csv_writer(b2, '2b_test.csv')
    #b3 = a.modify_data(b3, 'lambda', 6.0, 'mW', 'mW', 'mW')
    a.lammps_input_writer('test.sw', b2, b3)